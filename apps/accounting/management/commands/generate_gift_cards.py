import random
import string
from datetime import datetime, timedelta
import decimal

from django.core.management.base import BaseCommand, CommandError
from django.utils import timezone
from django.contrib.auth import get_user_model

from apps.crm.models import Customer
from apps.accounting.models import GiftCard

User = get_user_model()

class Command(BaseCommand):
    help = 'Generate one or more gift cards with specified parameters'
    
    def add_arguments(self, parser):
        parser.add_argument('--count',type=int,default=1,help='Number of gift cards to generate (default: 1)')
        parser.add_argument('--value',type=decimal.Decimal,required=True,help='Initial value for the gift cards')
        parser.add_argument('--currency',type=str,default='KES',choices=['KES', 'USD'],help='Currency for the gift cards (default: KES)')
        parser.add_argument('--customer',type=int,help='ID of the customer to issue the gift card to (optional)')
        parser.add_argument('--expires-in',type=int,default=365,help='Number of days until the gift card expires (default: 365)')
        parser.add_argument('--prefix',type=str,default='GC',help='Prefix for gift card codes (default: GC)')
        parser.add_argument('--length',type=int,default=8,help='Length of the random part of the code (default: 8)')
        parser.add_argument('--user',type=int,help='ID of the user issuing the gift cards (default: first staff user)')
    
    def handle(self, *args, **options):
        count = options['count']
        value = options['value']
        currency = options['currency']
        customer_id = options.get('customer')
        expires_in = options['expires_in']
        prefix = options['prefix']
        length = options['length']
        user_id = options.get('user')
        
        # Get or set the issuing user
        if user_id:
            try:
                user = User.objects.get(id=user_id, is_staff=True)
            except User.DoesNotExist:
                raise CommandError(f'Staff user with ID {user_id} does not exist')
        else:
            user = User.objects.filter(is_staff=True).first()
            if not user:
                raise CommandError('No staff users found. Please create a staff user first.')
        
        # Get customer if specified
        customer = None
        if customer_id:
            try:
                customer = Customer.objects.get(id=customer_id)
            except Customer.DoesNotExist:
                self.stderr.write(self.style.WARNING(f'Customer with ID {customer_id} not found. Creating unassigned gift cards.'))
        
        # Generate gift cards
        created_cards = []
        for i in range(count):
            # Generate a unique code
            while True:
                random_part = ''.join(random.choices(string.ascii_uppercase + string.digits, k=length))
                code = f"{prefix}{random_part}"
                if not GiftCard.objects.filter(code=code).exists():
                    break
            
            # Calculate expiry date
            expiry_date = timezone.now() + timedelta(days=expires_in) if expires_in > 0 else None
            
            # Create the gift card
            gift_card = GiftCard.objects.create(
                code=code,
                initial_value=value,
                current_balance=value,
                currency=currency,
                status='active',
                issued_to=customer,
                issued_by=user,
                expiry_date=expiry_date,
                notes=f'Generated by management command on {timezone.now().strftime("%Y-%m-%d %H:%M:%S")}'
            )
            
            if customer:
                customer.active_gift_cards.add(gift_card)
            
            created_cards.append(gift_card)
            
            self.stdout.write(self.style.SUCCESS(
                f'Created gift card {code}: {currency} {value:.2f} ' 
                f'(Expires: {expiry_date.strftime("%Y-%m-%d") if expiry_date else "Never"})' 
                f' for {customer.name if customer else "no customer"}'
            ))
        
        self.stdout.write(self.style.SUCCESS(f'\nSuccessfully created {len(created_cards)} gift cards'))
