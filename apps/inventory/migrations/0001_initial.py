# Generated by Django 5.2.3 on 2025-06-24 09:20

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('branches', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Allergy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('severity', models.CharField(choices=[('mild', 'Mild'), ('moderate', 'Moderate'), ('severe', 'Severe'), ('life_threatening', 'Life Threatening')], default='moderate', max_length=20, verbose_name='severity')),
                ('common_in', models.CharField(blank=True, help_text='Common ingredients/foods containing this allergen', max_length=255, verbose_name='common in')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
            ],
            options={
                'verbose_name': 'allergy',
                'verbose_name_plural': 'allergies',
                'ordering': ['-severity', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Menu',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='deleted at')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, verbose_name='updated at')),
                ('name', models.CharField(max_length=200, verbose_name='name')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('is_default', models.BooleanField(default=False, help_text='Default menu for this branch', verbose_name='is default')),
                ('valid_from', models.DateTimeField(blank=True, null=True, verbose_name='valid from')),
                ('valid_until', models.DateTimeField(blank=True, null=True, verbose_name='valid until')),
            ],
            options={
                'verbose_name': 'menu',
                'verbose_name_plural': 'menus',
                'ordering': ('-is_default', 'name'),
            },
        ),
        migrations.CreateModel(
            name='MenuItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='deleted at')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, verbose_name='updated at')),
                ('name', models.CharField(max_length=200, verbose_name='name')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('selling_price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='selling price')),
                ('cost_price', models.DecimalField(decimal_places=2, help_text='Calculated from recipe ingredients', max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='cost price')),
                ('preparation_time', models.DurationField(blank=True, help_text='Estimated preparation time', null=True, verbose_name='preparation time')),
                ('is_available', models.BooleanField(default=True, verbose_name='is available')),
                ('is_featured', models.BooleanField(default=False, verbose_name='is featured')),
                ('display_order', models.PositiveIntegerField(default=0, verbose_name='display order')),
                ('nutritional_info', models.JSONField(blank=True, default=dict, help_text='Nutritional information', verbose_name='nutritional info')),
            ],
            options={
                'verbose_name': 'menu item',
                'verbose_name_plural': 'menu items',
                'ordering': ('display_order', 'name'),
            },
        ),
        migrations.CreateModel(
            name='MenuItemModifier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='deleted at')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, verbose_name='updated at')),
                ('is_required', models.BooleanField(default=False, verbose_name='is required')),
                ('display_order', models.PositiveIntegerField(default=0, verbose_name='display order')),
            ],
            options={
                'verbose_name': 'menu item modifier',
                'verbose_name_plural': 'menu item modifiers',
                'ordering': ('display_order',),
            },
        ),
        migrations.CreateModel(
            name='Modifier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='deleted at')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, verbose_name='updated at')),
                ('name', models.CharField(max_length=200, verbose_name='name')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('modifier_type', models.CharField(choices=[('single', 'Single Selection'), ('multiple', 'Multiple Selection'), ('required', 'Required'), ('optional', 'Optional')], default='optional', max_length=20, verbose_name='modifier type')),
                ('price', models.DecimalField(decimal_places=2, default=0, max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='price')),
                ('min_selections', models.PositiveIntegerField(default=0, verbose_name='minimum selections')),
                ('max_selections', models.PositiveIntegerField(default=1, help_text='Use 0 for unlimited', verbose_name='maximum selections')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('image', models.ImageField(blank=True, null=True, upload_to='modifiers/', verbose_name='image')),
                ('display_order', models.PositiveIntegerField(default=0, verbose_name='display order')),
            ],
            options={
                'verbose_name': 'modifier',
                'verbose_name_plural': 'modifiers',
                'ordering': ('display_order', 'name'),
            },
        ),
        migrations.CreateModel(
            name='ModifierOption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='deleted at')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, verbose_name='updated at')),
                ('name', models.CharField(max_length=200, verbose_name='name')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('price_adjustment', models.DecimalField(decimal_places=2, default=0, max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='price adjustment')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('display_order', models.PositiveIntegerField(default=0, verbose_name='display order')),
            ],
            options={
                'verbose_name': 'modifier option',
                'verbose_name_plural': 'modifier options',
                'ordering': ('display_order', 'name'),
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='deleted at')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, verbose_name='updated at')),
                ('SKU', models.CharField(max_length=50, unique=True, verbose_name='SKU')),
                ('barcode', models.CharField(blank=True, max_length=100, unique=True, verbose_name='barcode')),
                ('name', models.CharField(max_length=200, verbose_name='name')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('product_type', models.CharField(choices=[('ingredient', 'Ingredient'), ('finished_product', 'Finished Product'), ('beverage', 'Beverage'), ('supplies', 'Supplies')], default='ingredient', help_text='Type of product for inventory management', max_length=20, verbose_name='product type')),
                ('cost_price', models.DecimalField(decimal_places=2, help_text='Default cost price for new branches', max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='cost price')),
                ('selling_price', models.DecimalField(decimal_places=2, help_text='Default selling price for new branches', max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='selling price')),
                ('track_batches', models.BooleanField(default=False, help_text='Enable batch/lot tracking for this product', verbose_name='track batches/lots')),
                ('track_expiry', models.BooleanField(default=False, help_text='Enable expiry date tracking for this product', verbose_name='track expiry dates')),
                ('nutritional_info', models.JSONField(blank=True, default=dict, help_text='Nutritional information', verbose_name='nutritional info')),
                ('is_available_for_sale', models.BooleanField(default=True, help_text='Whether this product can be sold directly', verbose_name='available for sale')),
                ('is_available_for_recipes', models.BooleanField(default=True, help_text='Whether this product can be used in recipes', verbose_name='available for recipes')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('kds_station_type', models.CharField(choices=[('hot_kitchen', 'Hot Kitchen'), ('cold_kitchen', 'Cold Kitchen'), ('prep', 'Prep Station'), ('beverage', 'Beverage Station')], default='hot_kitchen', help_text='Default kitchen station for this product', max_length=50, verbose_name='KDS station type')),
            ],
            options={
                'verbose_name': 'product',
                'verbose_name_plural': 'products',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='deleted at')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, verbose_name='updated at')),
                ('image', models.ImageField(blank=True, null=True, upload_to='products/', verbose_name='image')),
                ('is_default', models.BooleanField(default=False, verbose_name='is default')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
            ],
            options={
                'verbose_name': 'product image',
            },
        ),
        migrations.CreateModel(
            name='ProductVariant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='deleted at')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, verbose_name='updated at')),
                ('sku', models.CharField(max_length=50, unique=True, verbose_name='SKU')),
                ('barcode', models.CharField(blank=True, max_length=100, unique=True, verbose_name='barcode')),
                ('name', models.CharField(max_length=200, verbose_name='name')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('cost_price', models.DecimalField(decimal_places=2, help_text='Default cost price for new branches', max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='cost price')),
                ('selling_price', models.DecimalField(decimal_places=2, help_text='Default selling price for new branches', max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='selling price')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
            ],
            options={
                'verbose_name': 'product variant',
                'verbose_name_plural': 'product variants',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='deleted at')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, verbose_name='updated at')),
                ('instructions', models.TextField(blank=True, help_text='Cooking instructions', verbose_name='instructions')),
                ('cooking_time', models.DurationField(blank=True, null=True, verbose_name='cooking time')),
                ('difficulty_level', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard')], default='medium', max_length=20, verbose_name='difficulty level')),
                ('servings', models.PositiveIntegerField(default=1, help_text='Number of servings this recipe makes', verbose_name='servings')),
            ],
            options={
                'verbose_name': 'recipe',
                'verbose_name_plural': 'recipes',
            },
        ),
        migrations.CreateModel(
            name='RecipeIngredient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='deleted at')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, verbose_name='updated at')),
                ('quantity', models.DecimalField(decimal_places=3, max_digits=10, validators=[django.core.validators.MinValueValidator(0.001)], verbose_name='quantity')),
                ('notes', models.TextField(blank=True, help_text='Special notes for this ingredient', verbose_name='notes')),
                ('is_optional', models.BooleanField(default=False, help_text='Whether this ingredient is optional', verbose_name='is optional')),
            ],
            options={
                'verbose_name': 'recipe ingredient',
                'verbose_name_plural': 'recipe ingredients',
            },
        ),
        migrations.CreateModel(
            name='Supplier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='deleted at')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, verbose_name='updated at')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
                ('name', models.CharField(max_length=200, verbose_name='name')),
                ('contact_person', models.CharField(blank=True, max_length=100, verbose_name='contact person')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email')),
                ('phone', models.CharField(blank=True, max_length=20, verbose_name='phone')),
                ('address', models.TextField(blank=True, verbose_name='address')),
                ('tax_id', models.CharField(blank=True, max_length=50, verbose_name='tax ID')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
            ],
            options={
                'verbose_name': 'supplier',
                'verbose_name_plural': 'suppliers',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='UnitOfMeasure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='deleted at')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, verbose_name='updated at')),
                ('code', models.CharField(choices=[('kg', 'Kilogram (kg)'), ('g', 'Gram (g)'), ('L', 'Liter (L)'), ('mL', 'Milliliter (mL)'), ('pcs', 'Piece (pcs)'), ('pack', 'Pack'), ('bottle', 'Bottle'), ('box', 'Box')], max_length=10, unique=True, verbose_name='unit code')),
                ('name', models.CharField(max_length=50, verbose_name='name')),
                ('symbol', models.CharField(max_length=10, verbose_name='symbol')),
                ('is_fraction_allowed', models.BooleanField(default=True, help_text='Whether this unit can have fractional quantities', verbose_name='allow fractions')),
            ],
            options={
                'verbose_name': 'unit of measure',
                'verbose_name_plural': 'units of measure',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Batch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='deleted at')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, verbose_name='updated at')),
                ('batch_number', models.CharField(help_text='Unique identifier for this batch/lot', max_length=100, verbose_name='batch/lot number')),
                ('manufactured_date', models.DateField(blank=True, help_text='Date when this batch was manufactured', null=True, verbose_name='manufactured date')),
                ('expiry_date', models.DateField(blank=True, help_text='Expiry date for this batch (if applicable)', null=True, verbose_name='expiry date')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_%(class)ss', to=settings.AUTH_USER_MODEL, verbose_name='deleted by')),
            ],
            options={
                'verbose_name': 'batch',
                'verbose_name_plural': 'batches',
                'ordering': ['expiry_date', 'batch_number'],
            },
        ),
        migrations.CreateModel(
            name='BatchStock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='deleted at')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, verbose_name='updated at')),
                ('quantity', models.DecimalField(decimal_places=3, default=0, max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='quantity')),
                ('reserved_quantity', models.DecimalField(decimal_places=3, default=0, max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='reserved quantity')),
                ('last_checked', models.DateTimeField(auto_now=True, help_text='When this batch stock was last checked or updated', verbose_name='last checked')),
                ('batch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='branch_stock', to='inventory.batch', verbose_name='batch')),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='batch_stock', to='branches.branch', verbose_name='branch')),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_%(class)ss', to=settings.AUTH_USER_MODEL, verbose_name='deleted by')),
            ],
            options={
                'verbose_name': 'batch stock',
                'verbose_name_plural': 'batch stock',
                'ordering': ['batch__expiry_date', 'batch__batch_number'],
            },
        ),
        migrations.CreateModel(
            name='BranchStock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='deleted at')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, verbose_name='updated at')),
                ('current_stock', models.DecimalField(decimal_places=3, default=0, max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='current stock')),
                ('reorder_level', models.DecimalField(decimal_places=3, default=0, max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='reorder level')),
                ('cost_price', models.DecimalField(blank=True, decimal_places=2, help_text='Leave blank to use product default', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='cost price')),
                ('selling_price', models.DecimalField(blank=True, decimal_places=2, help_text='Leave blank to use product default', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='selling price')),
                ('last_restocked', models.DateTimeField(blank=True, null=True, verbose_name='last restocked')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stock_items', to='branches.branch', verbose_name='branch')),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_%(class)ss', to=settings.AUTH_USER_MODEL, verbose_name='deleted by')),
            ],
            options={
                'verbose_name': 'branch stock',
                'verbose_name_plural': 'branch stock levels',
                'ordering': ('product__name', 'branch__name'),
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='deleted at')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, verbose_name='updated at')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='name')),
                ('image', models.ImageField(blank=True, null=True, upload_to='categories/', verbose_name='image')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('is_menu_category', models.BooleanField(default=False, help_text='Whether this category is for menu items', verbose_name='is menu category')),
                ('is_ingredient_category', models.BooleanField(default=False, help_text='Whether this category is for ingredients', verbose_name='is ingredient category')),
                ('display_order', models.PositiveIntegerField(default=0, help_text='Order in which categories are displayed', verbose_name='display order')),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_%(class)ss', to=settings.AUTH_USER_MODEL, verbose_name='deleted by')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='inventory.category', verbose_name='parent category')),
            ],
            options={
                'verbose_name': 'category',
                'verbose_name_plural': 'categories',
                'ordering': ('display_order', 'name'),
            },
        ),
        migrations.CreateModel(
            name='InventoryAdjustment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='deleted at')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, verbose_name='updated at')),
                ('name', models.CharField(db_index=True, max_length=255, verbose_name='name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
                ('quantity_before', models.DecimalField(decimal_places=3, max_digits=10, verbose_name='quantity before')),
                ('quantity_after', models.DecimalField(decimal_places=3, max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='quantity after')),
                ('reason', models.TextField(verbose_name='reason')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=20, verbose_name='status')),
                ('reviewed_at', models.DateTimeField(blank=True, null=True, verbose_name='reviewed at')),
                ('review_notes', models.TextField(blank=True, verbose_name='review notes')),
                ('branch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='inventory_adjustments', to='branches.branch', verbose_name='branch')),
                ('branch_stock', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='adjustments', to='inventory.branchstock', verbose_name='branch stock')),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_%(class)ss', to=settings.AUTH_USER_MODEL, verbose_name='deleted by')),
                ('requested_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='requested_adjustments', to=settings.AUTH_USER_MODEL, verbose_name='requested by')),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_adjustments', to=settings.AUTH_USER_MODEL, verbose_name='reviewed by')),
            ],
            options={
                'verbose_name': 'inventory adjustment',
                'verbose_name_plural': 'inventory adjustments',
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='InventoryTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='deleted at')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, verbose_name='updated at')),
                ('name', models.CharField(db_index=True, max_length=255, verbose_name='name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
                ('transaction_type', models.CharField(choices=[('purchase', 'Purchase'), ('sale', 'Sale'), ('return', 'Return'), ('adjustment', 'Adjustment'), ('transfer', 'Transfer'), ('waste', 'Waste'), ('production', 'Production')], max_length=20, verbose_name='transaction type')),
                ('quantity', models.DecimalField(decimal_places=3, max_digits=10, validators=[django.core.validators.MinValueValidator(0.001)], verbose_name='quantity')),
                ('reference', models.CharField(blank=True, max_length=100, verbose_name='reference')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('branch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='inventory_transactions', to='branches.branch', verbose_name='branch')),
                ('branch_stock', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='inventory.branchstock', verbose_name='branch stock')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='inventory_transactions', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_%(class)ss', to=settings.AUTH_USER_MODEL, verbose_name='deleted by')),
            ],
            options={
                'verbose_name': 'inventory transaction',
                'verbose_name_plural': 'inventory transactions',
                'ordering': ('-created_at',),
            },
        ),
    ]
