# Generated by Django 5.2.3 on 2025-06-24 09:20

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('branches', '0001_initial'),
        ('crm', '0001_initial'),
        ('employees', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='FloorPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='deleted at')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, verbose_name='updated at')),
                ('name', models.CharField(db_index=True, max_length=255, verbose_name='name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this floor plan is currently active', verbose_name='is active')),
                ('width', models.PositiveIntegerField(default=1000, help_text='Width of the floor plan in pixels', verbose_name='width')),
                ('height', models.PositiveIntegerField(default=800, help_text='Height of the floor plan in pixels', verbose_name='height')),
                ('background_image', models.ImageField(blank=True, help_text='Background image for the floor plan', null=True, upload_to='floor_plans/', verbose_name='background image')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional floor plan data in JSON format', verbose_name='additional metadata')),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='floor_plans', to='branches.branch', verbose_name='branch')),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_%(class)ss', to=settings.AUTH_USER_MODEL, verbose_name='deleted by')),
            ],
            options={
                'verbose_name': 'floor plan',
                'verbose_name_plural': 'floor plans',
                'ordering': ('branch', 'name'),
            },
        ),
        migrations.CreateModel(
            name='TableCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='deleted at')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, verbose_name='updated at')),
                ('name', models.CharField(db_index=True, max_length=255, verbose_name='name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
                ('capacity', models.PositiveIntegerField(default=4, help_text='Default capacity for tables in this category', verbose_name='default capacity')),
                ('color', models.CharField(default='#000000', help_text='Color for table category visualization', max_length=7, verbose_name='color')),
                ('is_default', models.BooleanField(default=False, help_text='Set as default category for new tables', verbose_name='is default category')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional category-specific data in JSON format', verbose_name='additional metadata')),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='table_categories', to='branches.branch', verbose_name='branch')),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_%(class)ss', to=settings.AUTH_USER_MODEL, verbose_name='deleted by')),
            ],
            options={
                'verbose_name': 'table category',
                'verbose_name_plural': 'table categories',
                'ordering': ('branch', 'name'),
            },
        ),
        migrations.CreateModel(
            name='Table',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='deleted at')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, verbose_name='updated at')),
                ('name', models.CharField(db_index=True, max_length=255, verbose_name='name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
                ('number', models.CharField(help_text='Unique identifier for the table', max_length=10, verbose_name='table number')),
                ('capacity', models.PositiveIntegerField(default=4, help_text='Maximum number of guests that can sit at this table', validators=[django.core.validators.MinValueValidator(1)], verbose_name='capacity')),
                ('location', models.JSONField(blank=True, help_text='Table position coordinates for floor plan (x, y, rotation)', null=True, verbose_name='location coordinates')),
                ('size', models.JSONField(blank=True, help_text='Table dimensions (width, height) in pixels', null=True, verbose_name='table size')),
                ('shape', models.CharField(choices=[('rectangle', 'Rectangle'), ('circle', 'Circle'), ('square', 'Square'), ('oval', 'Oval')], default='rectangle', help_text='Shape of the table for floor plan display', max_length=20, verbose_name='table shape')),
                ('status', models.CharField(choices=[('available', 'Available'), ('occupied', 'Occupied'), ('reserved', 'Reserved'), ('maintenance', 'Maintenance'), ('cleaning', 'Cleaning')], default='available', help_text='Current status of the table', max_length=20, verbose_name='status')),
                ('is_combined', models.BooleanField(default=False, help_text='Whether this is a combined table', verbose_name='is combined table')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional table-specific data in JSON format', verbose_name='additional metadata')),
                ('last_status_change', models.DateTimeField(auto_now_add=True, verbose_name='last status change')),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tables', to='branches.branch', verbose_name='branch')),
                ('combined_tables', models.ManyToManyField(blank=True, help_text='Tables that are combined into this table', related_name='combined_into', to='tables.table')),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_%(class)ss', to=settings.AUTH_USER_MODEL, verbose_name='deleted by')),
                ('floor_plan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tables', to='tables.floorplan', verbose_name='floor plan')),
                ('waiter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_tables', to='employees.employee', verbose_name='waiter')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tables', to='tables.tablecategory', verbose_name='category')),
            ],
            options={
                'verbose_name': 'table',
                'verbose_name_plural': 'tables',
                'ordering': ('branch', 'number'),
            },
        ),
        migrations.CreateModel(
            name='TableReservation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='deleted at')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, verbose_name='updated at')),
                ('name', models.CharField(db_index=True, max_length=255, verbose_name='name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
                ('reservation_number', models.CharField(default=uuid.uuid4, editable=False, max_length=50, unique=True, verbose_name='reservation number')),
                ('reservation_time', models.DateTimeField(auto_now_add=True, help_text='Time when the table was reserved', verbose_name='reservation time')),
                ('expected_arrival_time', models.DateTimeField(help_text='Expected time of customer arrival', verbose_name='expected arrival time')),
                ('actual_arrival_time', models.DateTimeField(blank=True, help_text='Actual time of arrival', null=True, verbose_name='actual arrival time')),
                ('departure_time', models.DateTimeField(blank=True, help_text='Time when the customer left', null=True, verbose_name='departure time')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('seated', 'Seated'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('no_show', 'No Show')], default='pending', help_text='Current status of the reservation', max_length=20, verbose_name='status')),
                ('covers', models.PositiveIntegerField(default=1, help_text='Number of guests expected', validators=[django.core.validators.MinValueValidator(1)], verbose_name='number of covers')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the reservation', verbose_name='notes')),
                ('source', models.CharField(choices=[('in_house', 'In-House'), ('website', 'Website'), ('phone', 'Phone'), ('mobile_app', 'Mobile App'), ('walk_in', 'Walk-In'), ('other', 'Other')], default='in_house', help_text='Source of the reservation', max_length=50, verbose_name='reservation source')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional reservation data in JSON format', verbose_name='additional metadata')),
                ('customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='table_reservations', to='crm.customer', verbose_name='customer')),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_%(class)ss', to=settings.AUTH_USER_MODEL, verbose_name='deleted by')),
                ('table', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reservations', to='tables.table', verbose_name='table')),
            ],
            options={
                'verbose_name': 'table reservation',
                'verbose_name_plural': 'table reservations',
                'ordering': ('-expected_arrival_time', 'table__number'),
            },
        ),
        migrations.AddIndex(
            model_name='floorplan',
            index=models.Index(fields=['branch', 'is_active'], name='tables_floo_branch__d2919b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='floorplan',
            unique_together={('branch', 'name')},
        ),
        migrations.AddIndex(
            model_name='tablecategory',
            index=models.Index(fields=['branch', 'is_default'], name='tables_tabl_branch__1c7898_idx'),
        ),
        migrations.AddIndex(
            model_name='tablecategory',
            index=models.Index(fields=['branch', 'name'], name='tables_tabl_branch__6abe80_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='tablecategory',
            unique_together={('branch', 'name')},
        ),
        migrations.AddIndex(
            model_name='table',
            index=models.Index(fields=['branch', 'status'], name='tables_tabl_branch__172da6_idx'),
        ),
        migrations.AddIndex(
            model_name='table',
            index=models.Index(fields=['branch', 'category'], name='tables_tabl_branch__29c836_idx'),
        ),
        migrations.AddIndex(
            model_name='table',
            index=models.Index(fields=['branch', 'number'], name='tables_tabl_branch__953927_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='table',
            unique_together={('branch', 'number')},
        ),
        migrations.AddIndex(
            model_name='tablereservation',
            index=models.Index(fields=['table', 'status'], name='tables_tabl_table_i_c3d110_idx'),
        ),
        migrations.AddIndex(
            model_name='tablereservation',
            index=models.Index(fields=['expected_arrival_time'], name='tables_tabl_expecte_46cf81_idx'),
        ),
        migrations.AddIndex(
            model_name='tablereservation',
            index=models.Index(fields=['status'], name='tables_tabl_status_9d9afd_idx'),
        ),
    ]
