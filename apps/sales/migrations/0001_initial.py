# Generated by Django 5.2.3 on 2025-06-24 09:20

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounting', '0003_initial'),
        ('branches', '0001_initial'),
        ('crm', '0001_initial'),
        ('inventory', '0001_initial'),
        ('tables', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='deleted at')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, verbose_name='updated at')),
                ('service_type', models.CharField(choices=[('regular', 'Regular Service'), ('express', 'Express Service'), ('self_service', 'Self Service'), ('takeaway', 'Takeaway Service'), ('bar', 'Bar Service')], default='regular', max_length=20, verbose_name='service type')),
                ('estimated_preparation_time', models.DurationField(blank=True, null=True, verbose_name='estimated preparation time')),
                ('actual_preparation_time', models.DurationField(blank=True, null=True, verbose_name='actual preparation time')),
                ('preparation_notes', models.TextField(blank=True, help_text='Special preparation instructions', verbose_name='preparation notes')),
                ('order_number', models.CharField(db_index=True, editable=False, max_length=20, unique=True, verbose_name='order number')),
                ('order_type', models.CharField(choices=[('dine_in', 'Dine In'), ('takeaway', 'Takeaway'), ('delivery', 'Delivery'), ('online', 'Online Order'), ('bar', 'Bar Service')], default='dine_in', max_length=20, verbose_name='order type')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('confirmed', 'Confirmed'), ('processing', 'Processing'), ('ready', 'Ready'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('refunded', 'Refunded'), ('partial_refund', 'Partial Refund')], default='draft', max_length=20, verbose_name='status')),
                ('delivery_address', models.TextField(blank=True, help_text='Delivery address for takeaway/delivery orders', verbose_name='delivery address')),
                ('subtotal', models.DecimalField(decimal_places=2, default=0, help_text='Order subtotal before taxes and discounts', max_digits=10, verbose_name='subtotal')),
                ('tax_amount', models.DecimalField(decimal_places=2, default=0, help_text='Total tax amount', max_digits=10, verbose_name='tax amount')),
                ('discount_amount', models.DecimalField(decimal_places=2, default=0, help_text='Total discount amount', max_digits=10, verbose_name='discount amount')),
                ('total_amount', models.DecimalField(decimal_places=2, default=0, help_text='Final order total', max_digits=10, verbose_name='total amount')),
                ('payment_status', models.CharField(choices=[('pending', 'Pending'), ('paid', 'Paid'), ('partially_paid', 'Partially Paid'), ('overpaid', 'Overpaid'), ('refunded', 'Refunded')], default='pending', max_length=20, verbose_name='payment status')),
                ('payment_method', models.CharField(blank=True, choices=[('cash', 'Cash'), ('card', 'Card'), ('cheque', 'Cheque'), ('bank_transfer', 'Bank Transfer'), ('mpesa', 'M-Pesa'), ('paypal', 'PayPal'), ('other', 'Other')], max_length=20, verbose_name='payment method')),
                ('notes', models.TextField(blank=True, help_text='Special instructions or notes for the order', verbose_name='notes')),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='orders', to='branches.branch', verbose_name='branch')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='order_created', to=settings.AUTH_USER_MODEL)),
                ('customers', models.ManyToManyField(blank=True, related_name='orders', to='crm.customer')),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_%(class)ss', to=settings.AUTH_USER_MODEL, verbose_name='deleted by')),
                ('last_modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='order_modified', to=settings.AUTH_USER_MODEL, verbose_name='Last Updated By')),
                ('tables', models.ManyToManyField(blank=True, related_name='orders', to='tables.table')),
            ],
            options={
                'verbose_name': 'order',
                'verbose_name_plural': 'orders',
                'ordering': ['-created_at'],
                'permissions': [('split_order', 'Can split orders'), ('merge_orders', 'Can merge orders')],
            },
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='deleted at')),
                ('item_type', models.CharField(blank=True, choices=[('product', 'Product'), ('menu_item', 'Menu Item'), ('custom_item', 'Custom Item')], default='product', max_length=20, null=True, verbose_name='item type')),
                ('quantity', models.DecimalField(decimal_places=2, default=1, max_digits=10, validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='quantity')),
                ('unit_price', models.DecimalField(decimal_places=2, help_text='Price per unit at time of order', max_digits=10, verbose_name='unit price')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('preparing', 'Preparing'), ('ready', 'Ready'), ('served', 'Served'), ('cancelled', 'Cancelled')], default='pending', max_length=20, verbose_name='status')),
                ('notes', models.TextField(blank=True, help_text='Special instructions for this item', verbose_name='notes')),
                ('kitchen_notes', models.TextField(blank=True, help_text='Notes for kitchen staff', verbose_name='kitchen notes')),
                ('kitchen_status', models.CharField(choices=[('pending', 'Pending'), ('preparing', 'Preparing'), ('ready', 'Ready'), ('served', 'Served'), ('cancelled', 'Cancelled')], default='pending', help_text='Status reported by kitchen', max_length=20, verbose_name='kitchen status')),
                ('discount_amount', models.DecimalField(decimal_places=2, default=0, help_text='Discount applied to this item', max_digits=10, verbose_name='discount amount')),
                ('tax_amount', models.DecimalField(decimal_places=2, default=0, help_text='Tax amount for this item', max_digits=10, verbose_name='tax amount')),
                ('subtotal', models.DecimalField(decimal_places=2, default=0, help_text='Item subtotal before tax and discount', max_digits=10, verbose_name='subtotal')),
                ('total', models.DecimalField(decimal_places=2, default=0, help_text='Item total after tax and discount', max_digits=10, verbose_name='total')),
                ('ingredients_consumed', models.JSONField(blank=True, default=list, help_text='Ingredients consumed when this item was prepared', verbose_name='ingredients consumed')),
                ('inventory_updated', models.BooleanField(default=False, help_text='Whether inventory has been updated for this item', verbose_name='inventory updated')),
                ('modifiers', models.TextField(blank=True, help_text='Customizations or modifications for this item', verbose_name='modifiers')),
                ('is_custom', models.BooleanField(default=False, help_text='Whether this is a custom menu item', verbose_name='is custom item')),
                ('custom_data', models.JSONField(blank=True, help_text='Custom data for special menu items', null=True, verbose_name='custom data')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='created at')),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='updated at')),
                ('assigned_customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='order_items', to='crm.customer')),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_%(class)ss', to=settings.AUTH_USER_MODEL, verbose_name='deleted by')),
                ('menu_item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='order_items', to='inventory.menuitem', verbose_name='menu item')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='sales.order', verbose_name='order')),
                ('product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='order_items', to='inventory.product', verbose_name='product')),
            ],
            options={
                'verbose_name': 'order item',
                'verbose_name_plural': 'order items',
                'ordering': ['order', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='deleted at')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, verbose_name='updated at')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='amount')),
                ('method', models.CharField(choices=[('cash', 'Cash'), ('card', 'Card'), ('cheque', 'Cheque'), ('bank_transfer', 'Bank Transfer'), ('mpesa', 'M-Pesa'), ('paypal', 'PayPal'), ('online_payment', 'Online Payment'), ('loyalty_points', 'Loyalty Points'), ('gift_card', 'Gift Card'), ('other', 'Other')], default='cash', max_length=20, verbose_name='payment method')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('failed', 'Failed'), ('refunded', 'Refunded'), ('partial_refund', 'Partial Refund')], default='pending', max_length=20, verbose_name='status')),
                ('transaction_reference', models.CharField(blank=True, help_text='Transaction ID or reference from payment processor', max_length=100, verbose_name='transaction reference')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the payment', verbose_name='notes')),
                ('accounting_entry', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='payment', to='accounting.revenue', verbose_name='accounting entry')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='payments_created', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_%(class)ss', to=settings.AUTH_USER_MODEL, verbose_name='deleted by')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='payments', to='sales.order', verbose_name='order')),
            ],
            options={
                'verbose_name': 'payment',
                'verbose_name_plural': 'payments',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Dispute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.TextField(verbose_name='reason')),
                ('evidence', models.TextField(blank=True, verbose_name='evidence')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('resolved', 'Resolved'), ('escalated', 'Escalated'), ('cancelled', 'Cancelled')], default='pending', max_length=20, verbose_name='status')),
                ('resolution_notes', models.TextField(blank=True, verbose_name='resolution notes')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('reported_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='reported_disputes', to=settings.AUTH_USER_MODEL)),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='resolved_disputes', to=settings.AUTH_USER_MODEL)),
                ('payment', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='disputes', to='sales.payment')),
            ],
            options={
                'verbose_name': 'dispute',
                'verbose_name_plural': 'disputes',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PaymentHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('history_type', models.CharField(choices=[('payment', 'Payment'), ('refund', 'Refund'), ('dispute', 'Dispute'), ('verification', 'Verification'), ('status_change', 'Status Change')], max_length=20, verbose_name='history type')),
                ('details', models.JSONField(help_text='JSON object containing relevant details for the history record', verbose_name='details')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('payment', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='history', to='sales.payment')),
            ],
            options={
                'verbose_name': 'payment history',
                'verbose_name_plural': 'payment history',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['order_number'], name='sales_order_order_n_1515f9_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['status'], name='sales_order_status_2602a7_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['payment_status'], name='sales_order_payment_ca014c_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['created_at'], name='sales_order_created_8a4d37_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['branch'], name='sales_order_branch__d924c4_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['branch', 'created_at'], name='sales_order_branch__764cb9_idx'),
        ),
        migrations.AddIndex(
            model_name='orderitem',
            index=models.Index(fields=['order'], name='sales_order_order_i_db59cc_idx'),
        ),
        migrations.AddIndex(
            model_name='orderitem',
            index=models.Index(fields=['product'], name='sales_order_product_138dad_idx'),
        ),
        migrations.AddIndex(
            model_name='orderitem',
            index=models.Index(fields=['menu_item'], name='sales_order_menu_it_b15ff1_idx'),
        ),
        migrations.AddIndex(
            model_name='orderitem',
            index=models.Index(fields=['status'], name='sales_order_status_29f343_idx'),
        ),
        migrations.AddIndex(
            model_name='orderitem',
            index=models.Index(fields=['kitchen_status'], name='sales_order_kitchen_b307e7_idx'),
        ),
        migrations.AddIndex(
            model_name='orderitem',
            index=models.Index(fields=['item_type'], name='sales_order_item_ty_9dd32e_idx'),
        ),
    ]
